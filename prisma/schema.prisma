generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model School {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  location      String
  news          News[]
  subscribtions Subscribtion[]
  admins        Admin[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@unique([name, location])
}

model News {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  content        String
  school         School           @relation(fields: [schoolId], references: [id])
  schoolId       String           @db.ObjectId
  subscribedNews SubscribedNews[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deletedAt      DateTime?

  @@index([schoolId, createdAt(sort: Desc)])
}

model Admin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String
  school    School?  @relation(fields: [schoolId], references: [id])
  schoolId  String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  email          String           @unique
  name           String
  subscribtions  Subscribtion[]
  subscribedNews SubscribedNews[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Subscribtion {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @db.ObjectId
  school    School    @relation(fields: [schoolId], references: [id])
  schoolId  String    @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([userId, createdAt(sort: Desc)])
  @@index([schoolId, userId])
}

model SubscribedNews {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @db.ObjectId
  news      News      @relation(fields: [newsId], references: [id])
  newsId    String    @db.ObjectId
  createdAt DateTime
  deletedAt DateTime?

  @@unique([newsId, userId])
  @@index([userId, createdAt(sort: Desc)])
}
